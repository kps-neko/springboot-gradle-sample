buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // SpringBootのバージョンはプラグインだけで設定されなければならない。
        classpath "org.springframework.boot:spring-boot-gradle-plugin:1.3.0.RELEASE"
        classpath "org.flywaydb:flyway-gradle-plugin:3.2.1"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: "org.flywaydb.flyway"

jar {
    baseName = 'springboot-gradle-sample'
    version = '0.1.0'

    // 依存jar内のクラスも含めて一つのjarに入れるための設定
    //from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
}

repositories {
    mavenCentral()
}

// 拡張プロパティ
ext {
    // loggers
    slf4jVersion = "1.7.9"
    logbackVersion = "1.1.2"

    // JDBC Driver設定
    dbSetting = [
            driverGroup  : "org.postgresql:postgresql",
            driverVersion: "9.4-1205-jdbc4",
            driverClass  : "org.postgresql.Driver",
            connectionUrl: "jdbc:postgresql://localhost/postgres",
            userId       : "postgres",
            password     : "hmj",
    ]

    // MyBatis
    myBatisVersion = "3.3.0"
    myBatisSpringVersion = "1.2.3"

    // springSecurity
    springSecurityVersion = "3.2.6.RELEASE"

    // MyBatisGeneratorの設定。各項目とも必須です。
    myBatisGeneratorConfig = [
            // ジェネレータバージョン。
            generatorVersion : "1.3.2",
            // スキーマ名の設定
            schema           : "public",
            // 自動生成ファイルの出力パッケージのベースになる。アプリケーションの最下層のパッケージで良い。
            basePackage      : "sample",
            // DBのスキーマ名でパッケージを切るかどうか。
            enableSubPackages: "false",
            // mapperのタイプはANNOTATEDMAPPER,XMLMAPPER,MIXEDMAPPERから選択
            mapperType       : "XMLMAPPER",
    ]
}

// Java Use Version
sourceCompatibility = 1.8
targetCompatibility = 1.8

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

// mybatisタスクの設定を追加。
configurations {
    genMyBatis
}

// 依存関係設定
dependencies {
    // loggers
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    compile "org.slf4j:jul-to-slf4j:$slf4jVersion"
    compile "ch.qos.logback:logback-classic:$logbackVersion"

    // spring-bootはバージョン指定しない。プラグインの設定で一元管理されてる。
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-test"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "org.springframework.boot:spring-boot-starter-thymeleaf"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-jdbc"

    // ロールによって表示項目の制御するために必要
    compile 'org.thymeleaf.extras:thymeleaf-extras-springsecurity4:2.1.2.RELEASE'

    // JDBC Driverの依存
    compile "${dbSetting.driverGroup}:${dbSetting.driverVersion}"

    // MyBatis
    compile "org.mybatis:mybatis:$myBatisVersion"
    compile "org.mybatis:mybatis-spring:$myBatisSpringVersion"

    // genMyBatisタスクの依存ライブラリ。
    genMyBatis "org.mybatis.generator:mybatis-generator-core:$myBatisGeneratorConfig.generatorVersion"
    genMyBatis "${dbSetting.driverGroup}:${dbSetting.driverVersion}"

    testCompile "junit:junit"
}

flyway {
    url = dbSetting.connectionURL
    user = dbSetting.userId
    password = dbSetting.password
}

// genMyBatisはMyBatisのジェネレータを。
task genMyBatis << {
    myBatisGeneratorConfig.each { key, val ->
        ant.properties["conf.$key"] = val
    }
    dbSetting.each { key, val ->
        ant.properties["conf.$key"] = val
    }
    ant.taskdef(
            name: 'genfiles',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.genMyBatis.asPath)
    ant.genfiles(
            overwrite: 'true',
            configfile: "$projectDir/src/main/resources/generatorConfig.xml",
            verbose: 'false') {
        propertyset {
            propertyref(prefix: 'conf.')
        }
    }
}